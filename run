#!/usr/bin/env python3

import json
import os
import os.path
import argparse
import subprocess
import random
import string
import textwrap
from sys import argv
import http.client
import time

PROJECT_NAME = 'dapp-framework'
DEFAULT_PORT = 8000
NEXT_ENABLED = True
EXPRESS_ENABLED = True
MONGO_ENABLED = True
REDIS_ENABLED = True
WORKER_ENABLED = True # changing this to False will break the CLI (bash & node) functionality, since it uses the worker image
CERTBOT_EMAIL = 'certbot-notifications@tk.co'

DOCKER_INSTALL_SCRIPT = '''
  if ! which dockerd; then
    curl -fsSL https://get.docker.com | bash
  fi
  if ! docker compose && ! which docker-compose; then
    curl -L "https://github.com/docker/compose/releases/download/v2.2.2/docker-compose-linux-x86_64" -o /usr/local/bin/docker-compose
    chmod +x /usr/local/bin/docker-compose
  fi
'''

def main():
  global args, config

  proj_dir = os.path.abspath(os.path.dirname(os.path.abspath(__file__)))

  parser = argparse.ArgumentParser(description='run or deploy the application')

  parser.add_argument('config', type=str,
                      help='config filename')
  parser.add_argument('command', type=str, nargs='?',
                      help='command to run -- can be: run, bg, stop, deploy, cli')
  parser.add_argument('command_args', nargs=argparse.REMAINDER)

  args = parser.parse_args()

  with open(args.config) as config_f:
    config = json.load(config_f)

  os.chdir(proj_dir)

  if not os.path.exists('build'):
    os.mkdir('build')

  parse_config()

  print(f'docker-compose command: {compose_command}')

  with open(os.path.join('build', 'config.json'), 'w') as f:
    json.dump(config, f)

  config_nginx()

  if command in ['fg', 'run']:
    docker_prep()
    docker_compose_call(['up', '--remove-orphans'])
  elif command == 'bg':
    bg()
  elif command == 'stop':
    docker_down()
  elif command == 'clear-data':
    docker_clear_data()
  elif command == 'logs':
    docker_compose_call(['logs', '-f'])
  elif command == 'bash':
    docker_prep_if_down()
    docker_compose_call(['run', 'node', 'bash', '-c', 'bash'])
  elif command == 'node':
    docker_prep_if_down()
    docker_compose_call(['run', 'node', 'bash', '-c', 'node'])
  elif command == 'test-host':
    do_test(where='host')
  elif command == 'test':
    do_test(where='docker')
  elif command == 'compose-call':
    docker_compose_call(args.command_args)
  elif command == 'install-docker':
    run(['bash', '-c', DOCKER_INSTALL_SCRIPT])
  elif command == 'install':
    service_config = textwrap.dedent(f'''
      [Service]
      User=root
      WorkingDirectory={proj_dir}
      ExecStart={proj_dir}/run {args.config} fg
      ExecStop={proj_dir}/run {args.config} stop
      Restart=on-failure
      RestartSec=5

      [Unit]
      Description={PROJECT_NAME}
      Requires=docker.service
      After=docker.service
      StartLimitIntervalSec=300
      StartLimitBurst=10

      [Install]
      WantedBy=multi-user.target
    ''')
    with open(f'/etc/systemd/system/{PROJECT_NAME}.service', 'w') as f:
      f.write(service_config)

    run([
      'bash', '-c',
      textwrap.dedent(f'''
        systemctl daemon-reload
        systemctl restart {PROJECT_NAME}
        systemctl enable {PROJECT_NAME}
      ''')
    ])
  elif command == 'logs-remote':
    run([
      'ssh',
      f'root@{host}',
      f'''
        /opt/{PROJECT_NAME}/run /opt/{PROJECT_NAME}/{args.config} logs
      ''',
    ])
  elif command in ['deploy', 'fg-remote']:
    if not host:
      raise Exception('host must be specified for deploy')

    run([
      'ssh',
      f'root@{host}',
      f'''
        systemctl stop {PROJECT_NAME} || true
        /opt/{PROJECT_NAME}/run /opt/{PROJECT_NAME}/{args.config} stop || true
      ''',
    ])

    run([
      'rsync',
      '-av',
      '--delete-after',
      '--exclude',
      '.git',
      '--include',
      '/package.json',
      '--include',
      '/package-lock.json',
      '--exclude',
      '/*.json',
      '--exclude',
      'node_modules',
      '--exclude',
      'build',
      '--exclude',
      '.vscode',
      '--exclude',
      '.next',
      './',
      f'root@{host}:/opt/{PROJECT_NAME}/',
    ])

    run([
      'rsync',
      '-av',
      args.config,
      f'root@{host}:/opt/{PROJECT_NAME}/',
    ])

    if command == 'fg-remote':
      cmd = 'fg'
    else:
      cmd = 'install'

    run([
      'ssh',
      f'root@{host}',
      f'''
        {DOCKER_INSTALL_SCRIPT}
        /opt/{PROJECT_NAME}/run /opt/{PROJECT_NAME}/{args.config} {cmd}
      ''',
    ])
  else:
    raise Exception(f'unknown command: {command}')

def do_test(where):
  out = docker_compose_call(['ps'], get_output=True).stdout
  if 'nginx' in out and 'Up' in out:
    already_running = True
  else:
    already_running = False

  if not already_running:
    bg()

  def check_running():
    try:
      conn = http.client.HTTPConnection('localhost:8000')
      conn.request("GET", '/_alive')
      if conn.getresponse().status == 200:
        return True
      else:
        return False
    except Exception:
      return False

  if not check_running():
    print('application not yet running, waiting for it to start...')
    running_check_start_time = time.time()
    while True:
      time.sleep(0.25)
      if check_running():
        print('application is now running! launching test')
        break
      if time.time() - running_check_start_time > 120:
        raise Exception('application took too long to start')

  try:
    if where == 'docker':
      run(compose_command_base + ['-f', compose_file_path('test'), 'build'])
      run(compose_command_base + ['-f', compose_file_path('test'), 'run', 'test'])
    elif where == 'host':
      run(['bash', '-c', 'cd test && npm install && npm test'])
    else:
      raise Exception('invalid `where`')

  finally:
    if not already_running:
      docker_down()

def bg():
  docker_prep()
  docker_compose_call(['up', '-d', '--remove-orphans'])

def run(cmd, get_output=False, ignore_error=False):
  return subprocess.run(cmd, check=not ignore_error, capture_output=get_output, text=get_output)

def docker_compose_call(args, get_output=False, ignore_error=False):
  cmd = compose_command + args
  print(f'docker_compose_call: {cmd}')
  return run(cmd, get_output=get_output, ignore_error=ignore_error)

def docker_down():
  docker_compose_call(['down', '--remove-orphans'], ignore_error=True)

def docker_clear_data():
  docker_compose_call(['down', '--remove-orphans', '--volumes'])

def docker_build():
  docker_compose_call(['build'])

def docker_prep():
  docker_down()
  docker_build()
  npm_install_if_needed()

def npm_install_if_needed():
  docker_compose_call(['run', 'node', 'python3', 'misc/npm-install-if-needed'])

def docker_prep_if_down():
  if not docker_is_up():
    docker_prep()

def docker_is_up():
  try:
    return len(docker_compose_call(['top'], get_output=True).stdout.strip()) > 0
  except:
    docker_compose_call(['top'])
    raise

if subprocess.run(['docker', 'compose'], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL).returncode == 0:
  compose_command_base = ['docker', 'compose']
else:
  compose_command_base = ['docker-compose']

compose_command_base += ['-p', PROJECT_NAME]

compose_command = compose_command_base.copy()

def compose_file_path(filename):
  return os.path.join('docker-compose', f'{filename}.yml')

def add_compose_config(filename):
  compose_command.append('-f')
  compose_command.append(compose_file_path(filename))

def parse_config():
  global use_ssl, local, port, develop, admin_password, domain, compose_command, mongo_express_enabled, jupyter_enabled, code_server_enabled, host, command

  command = args.command

  add_compose_config('main')

  add_compose_config('node')

  if MONGO_ENABLED:
    add_compose_config('mongo')

  if REDIS_ENABLED:
    add_compose_config('redis')

    if config['server'].get('mongo_exposed_localhost', False):
      add_compose_config('mongo-exposed-localhost')

  mongo_express_enabled = config['server'].get('mongo_express_enabled', False)
  if mongo_express_enabled:
    add_compose_config('mongo-express')

  jupyter_enabled = config['server'].get('jupyter_enabled', False)
  if jupyter_enabled:
    add_compose_config('jupyter')

  code_server_enabled = config['server'].get('code_server_enabled', False)
  if code_server_enabled:
    add_compose_config('code-server')

  host = config['deployer'].get('host')
  domain = config['server'].get('domain')
  if host and not domain:
    domain = host
    config['server']['domain'] = host
  if domain:
    use_ssl = True
    config['public']['base_url'] = f'https://{domain}'
    add_compose_config('with-ssl')
  else:
    use_ssl = False
    config['public']['base_url'] = f'http://localhost:8000'
    add_compose_config('without-ssl')
    # 8/5/22 -- next two lines unused? commenting out for now
    # local = config.get('local', True)
    # port = config.get('port', DEFAULT_PORT)
  admin_password = config['server'].get('admin_password')
  if admin_password is None:
    admin_password = random_password()
    print(f'admin_password - randomly generated for this build: {admin_password}')
  assert admin_password

def random_password():
  rand = random.SystemRandom()
  chars = string.ascii_lowercase + string.ascii_uppercase + string.digits
  return ''.join(random.choice(chars) for _ in range(32))

def config_nginx():
  app_part = textwrap.dedent(f'''
    client_max_body_size 100M;
    gzip on;
    gzip_vary on;
    gzip_min_length 10240;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/x-javascript application/xml;
    proxy_connect_timeout       300;
    proxy_send_timeout          300;
    proxy_read_timeout          300;
    send_timeout                300;
  ''')

  if EXPRESS_ENABLED:
    app_part += textwrap.dedent(f'''
      location /express/ {{
        proxy_pass http://node:8002/;

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_buffering off;
        proxy_redirect off;
      }}
    ''')

  if NEXT_ENABLED:
    app_part += textwrap.dedent(f'''
      location / {{
        proxy_pass http://node:8001/;

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_buffering off;
        proxy_redirect off;
      }}
    ''')

  if code_server_enabled:
    app_part += textwrap.dedent(f'''
      location /code/ {{
        proxy_pass http://code-server:8080/;

        auth_basic "";
        auth_basic_user_file /opt/htpasswd-admin;

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_buffering off;
        proxy_redirect off;
      }}

      location /stable-30d9c6cd9483b2cc586687151bcbcd635f373630/ {{
        proxy_pass http://code-server:8080/stable-30d9c6cd9483b2cc586687151bcbcd635f373630/;

        auth_basic "";
        auth_basic_user_file /opt/htpasswd-admin;

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_buffering off;
        proxy_redirect off;
      }}

      location /vs/ {{
        proxy_pass http://code-server:8080/vs/;

        auth_basic "";
        auth_basic_user_file /opt/htpasswd-admin;

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_buffering off;
        proxy_redirect off;
      }}
    ''')

  if mongo_express_enabled:
    app_part += textwrap.dedent(f'''
      location /mongo-express/ {{
        proxy_pass http://mongo-express:8081/mongo-express/;

        auth_basic "";
        auth_basic_user_file /opt/htpasswd-admin;

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_buffering off;
        proxy_redirect off;
      }}
    ''')

  if jupyter_enabled:
    app_part += textwrap.dedent(f'''
      location /jupyter/ {{
        proxy_pass http://jupyter:8003/jupyter/;

        auth_basic "";
        auth_basic_user_file /opt/htpasswd-admin;

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_buffering off;
        proxy_redirect off;
      }}
    ''')

  if use_ssl:
    nginx_config = textwrap.dedent(f'''
      server {{
        server_name {domain};

        listen 80;

        return 301 https://{domain}$request_uri;
      }}

      server {{
        server_name {domain};

        listen 443 ssl http2;

        {app_part}

        ssl_certificate /etc/letsencrypt/live/{domain}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/{domain}/privkey.pem;
      }}
    ''')
  else:
    nginx_config = textwrap.dedent(f'''
      server {{
        server_name app;

        listen 8000;

        {app_part}
      }}
    ''')

  with open(os.path.join('build', 'nginx-app.conf'), 'w') as f:
    f.write(nginx_config)

  nginx_env = textwrap.dedent(f'''
    USE_SSL={'true' if use_ssl else 'false'}
    CERTBOT_DOMAIN={domain}
    CERTBOT_EMAIL={CERTBOT_EMAIL}
  ''')
  with open(os.path.join('build', 'nginx.env'), 'w') as f:
    f.write(nginx_env)

  with open(os.path.join('build', 'nginx-admin-password.txt'), 'w') as f:
    f.write(admin_password)

if __name__ == '__main__':
  main()
